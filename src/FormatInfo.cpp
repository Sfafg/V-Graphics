#include "FormatInfo.h"

namespace vg
{
    Flags<FormatComponent> GetComponents(Format format)
    {
        switch (format)
        {
        case Format::Undefined:return {};
        case Format::RG4UNORMPACKED:return { FormatComponent::R, FormatComponent::G };
        case Format::RGBA4UNORMPACK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::BGRA4UNORMPACK:return { FormatComponent::B, FormatComponent::G, FormatComponent::R, FormatComponent::A };
        case Format::R5G6B5UNORMPACK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B };
        case Format::B5G6R5UNORMPACK:return { FormatComponent::B, FormatComponent::G, FormatComponent::R };
        case Format::RGB5A1UNORMPACK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::BGR5A1UNORMPACK:return { FormatComponent::B, FormatComponent::G, FormatComponent::R, FormatComponent::A };
        case Format::A1RGB5UNORMPACK:return { FormatComponent::A, FormatComponent::R, FormatComponent::G, FormatComponent::B };
        case Format::R8UNORM:return { FormatComponent::R };
        case Format::R8SNORM:return { FormatComponent::R };
        case Format::R8USCALED:return { FormatComponent::R };
        case Format::R8SSCALED:return { FormatComponent::R };
        case Format::R8UINT:return { FormatComponent::R };
        case Format::R8SINT:return { FormatComponent::R };
        case Format::R8SRGB:return { FormatComponent::R };
        case Format::RG8UNORM:return { FormatComponent::R, FormatComponent::G };
        case Format::RG8SNORM:return { FormatComponent::R, FormatComponent::G };
        case Format::RG8USCALED:return { FormatComponent::R, FormatComponent::G };
        case Format::RG8SSCALED:return { FormatComponent::R, FormatComponent::G };
        case Format::RG8UINT:return { FormatComponent::R, FormatComponent::G };
        case Format::RG8SINT:return { FormatComponent::R, FormatComponent::G };
        case Format::RG8SRGB:return { FormatComponent::R, FormatComponent::G };
        case Format::RGB8UNORM:return { FormatComponent::R, FormatComponent::G, FormatComponent::B };
        case Format::RGB8SNORM:return { FormatComponent::R, FormatComponent::G, FormatComponent::B };
        case Format::RGB8USCALED:return { FormatComponent::R, FormatComponent::G, FormatComponent::B };
        case Format::RGB8SSCALED:return { FormatComponent::R, FormatComponent::G, FormatComponent::B };
        case Format::RGB8UINT:return { FormatComponent::R, FormatComponent::G, FormatComponent::B };
        case Format::RGB8SINT:return { FormatComponent::R, FormatComponent::G, FormatComponent::B };
        case Format::RGB8SRGB:return { FormatComponent::R, FormatComponent::G, FormatComponent::B };
        case Format::BGR8UNORM:return { FormatComponent::B, FormatComponent::G, FormatComponent::R };
        case Format::BGR8SNORM:return { FormatComponent::B, FormatComponent::G, FormatComponent::R };
        case Format::BGR8USCALED:return { FormatComponent::B, FormatComponent::G, FormatComponent::R };
        case Format::BGR8SSCALED:return { FormatComponent::B, FormatComponent::G, FormatComponent::R };
        case Format::BGR8UINT:return { FormatComponent::B, FormatComponent::G, FormatComponent::R };
        case Format::BGR8SINT:return { FormatComponent::B, FormatComponent::G, FormatComponent::R };
        case Format::BGR8SRGB:return { FormatComponent::B, FormatComponent::G, FormatComponent::R };
        case Format::RGBA8UNORM:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::RGBA8SNORM:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::RGBA8USCALED:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::RGBA8SSCALED:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::RGBA8UINT:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::RGBA8SINT:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::RGBA8SRGB:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::BGRA8UNORM:return { FormatComponent::B, FormatComponent::G, FormatComponent::R, FormatComponent::A };
        case Format::BGRA8SNORM:return { FormatComponent::B, FormatComponent::G, FormatComponent::R, FormatComponent::A };
        case Format::BGRA8USCALED:return { FormatComponent::B, FormatComponent::G, FormatComponent::R, FormatComponent::A };
        case Format::BGRA8SSCALED:return { FormatComponent::B, FormatComponent::G, FormatComponent::R, FormatComponent::A };
        case Format::BGRA8UINT:return { FormatComponent::B, FormatComponent::G, FormatComponent::R, FormatComponent::A };
        case Format::BGRA8SINT:return { FormatComponent::B, FormatComponent::G, FormatComponent::R, FormatComponent::A };
        case Format::BGRA8SRGB:return { FormatComponent::B, FormatComponent::G, FormatComponent::R, FormatComponent::A };
        case Format::ABGR8UNORMPACK:return { FormatComponent::A, FormatComponent::B, FormatComponent::G, FormatComponent::R };
        case Format::ABGR8SNORMPACK:return { FormatComponent::A, FormatComponent::B, FormatComponent::G, FormatComponent::R };
        case Format::ABGR8USCALEDPACK:return { FormatComponent::A, FormatComponent::B, FormatComponent::G, FormatComponent::R };
        case Format::ABGR8SSCALEDPACK:return { FormatComponent::A, FormatComponent::B, FormatComponent::G, FormatComponent::R };
        case Format::ABGR8UINTPACK:return { FormatComponent::A, FormatComponent::B, FormatComponent::G, FormatComponent::R };
        case Format::ABGR8SINTPACK:return { FormatComponent::A, FormatComponent::B, FormatComponent::G, FormatComponent::R };
        case Format::ABGR8SRGBPACK:return { FormatComponent::A, FormatComponent::B, FormatComponent::G, FormatComponent::R };
        case Format::A2RGB10UNORMPACK:return { FormatComponent::A, FormatComponent::R, FormatComponent::G, FormatComponent::B };
        case Format::A2RGB10SNORMPACK:return { FormatComponent::A, FormatComponent::R, FormatComponent::G, FormatComponent::B };
        case Format::A2RGB10USCALEDPACK:return { FormatComponent::A, FormatComponent::R, FormatComponent::G, FormatComponent::B };
        case Format::A2RGB10SSCALEDPACK:return { FormatComponent::A, FormatComponent::R, FormatComponent::G, FormatComponent::B };
        case Format::A2RGB10UINTPACK:return { FormatComponent::A, FormatComponent::R, FormatComponent::G, FormatComponent::B };
        case Format::A2RGB10SINTPACK:return { FormatComponent::A, FormatComponent::R, FormatComponent::G, FormatComponent::B };
        case Format::A2BGR10UNORMPACK:return { FormatComponent::A, FormatComponent::B, FormatComponent::G, FormatComponent::R };
        case Format::A2BGR10SNORMPACK:return { FormatComponent::A, FormatComponent::B, FormatComponent::G, FormatComponent::R };
        case Format::A2BGR10USCALEDPACK:return { FormatComponent::A, FormatComponent::B, FormatComponent::G, FormatComponent::R };
        case Format::A2BGR10SSCALEDPACK:return { FormatComponent::A, FormatComponent::B, FormatComponent::G, FormatComponent::R };
        case Format::A2BGR10UINTPACK:return { FormatComponent::A, FormatComponent::B, FormatComponent::G, FormatComponent::R };
        case Format::A2BGR10SINTPACK:return { FormatComponent::A, FormatComponent::B, FormatComponent::G, FormatComponent::R };
        case Format::R16UNORM:return { FormatComponent::R };
        case Format::R16SNORM:return { FormatComponent::R };
        case Format::R16USCALED:return { FormatComponent::R };
        case Format::R16SSCALED:return { FormatComponent::R };
        case Format::R16UINT:return { FormatComponent::R };
        case Format::R16SINT:return { FormatComponent::R };
        case Format::R16SFLOAT:return { FormatComponent::R };
        case Format::RG16UNORM:return { FormatComponent::R, FormatComponent::G };
        case Format::RG16SNORM:return { FormatComponent::R, FormatComponent::G };
        case Format::RG16USCALED:return { FormatComponent::R, FormatComponent::G };
        case Format::RG16SSCALED:return { FormatComponent::R, FormatComponent::G };
        case Format::RG16UINT:return { FormatComponent::R, FormatComponent::G };
        case Format::RG16SINT:return { FormatComponent::R, FormatComponent::G };
        case Format::RG16SFLOAT:return { FormatComponent::R, FormatComponent::G };
        case Format::RGB16UNORM:return { FormatComponent::R, FormatComponent::G, FormatComponent::B };
        case Format::RGB16SNORM:return { FormatComponent::R, FormatComponent::G, FormatComponent::B };
        case Format::RGB16USCALED:return { FormatComponent::R, FormatComponent::G, FormatComponent::B };
        case Format::RGB16SSCALED:return { FormatComponent::R, FormatComponent::G, FormatComponent::B };
        case Format::RGB16UINT:return { FormatComponent::R, FormatComponent::G, FormatComponent::B };
        case Format::RGB16SINT:return { FormatComponent::R, FormatComponent::G, FormatComponent::B };
        case Format::RGB16SFLOAT:return { FormatComponent::R, FormatComponent::G, FormatComponent::B };
        case Format::RGBA16UNORM:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::RGBA16SNORM:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::RGBA16USCALED:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::RGBA16SSCALED:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::RGBA16UINT:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::RGBA16SINT:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::RGBA16SFLOAT:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::R32UINT:return { FormatComponent::R };
        case Format::R32SINT:return { FormatComponent::R };
        case Format::R32SFLOAT:return { FormatComponent::R };
        case Format::RG32UINT:return { FormatComponent::R, FormatComponent::G };
        case Format::RG32SINT:return { FormatComponent::R, FormatComponent::G };
        case Format::RG32SFLOAT:return { FormatComponent::R, FormatComponent::G };
        case Format::RGB32UINT:return { FormatComponent::R, FormatComponent::G, FormatComponent::B };
        case Format::RGB32SINT:return { FormatComponent::R, FormatComponent::G, FormatComponent::B };
        case Format::RGB32SFLOAT:return { FormatComponent::R, FormatComponent::G, FormatComponent::B };
        case Format::RGBA32UINT:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::RGBA32SINT:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::RGBA32SFLOAT:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::R64UINT:return { FormatComponent::R };
        case Format::R64SINT:return { FormatComponent::R };
        case Format::R64SFLOAT:return { FormatComponent::R };
        case Format::RG64UINT:return { FormatComponent::R, FormatComponent::G };
        case Format::RG64SINT:return { FormatComponent::R, FormatComponent::G };
        case Format::RG64SFLOAT:return { FormatComponent::R, FormatComponent::G };
        case Format::RGB64UINT:return { FormatComponent::R, FormatComponent::G, FormatComponent::B };
        case Format::RGB64SINT:return { FormatComponent::R, FormatComponent::G, FormatComponent::B };
        case Format::RGB64SFLOAT:return { FormatComponent::R, FormatComponent::G, FormatComponent::B };
        case Format::RGBA64UINT:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::RGBA64SINT:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::RGBA64SFLOAT:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::B10GR11UFLOATPACK:return { FormatComponent::B, FormatComponent::G, FormatComponent::R };
        case Format::E5BGR9UFLOATPACK:return { FormatComponent::B, FormatComponent::G, FormatComponent::R };
        case Format::D16UNORM:return { FormatComponent::D };
        case Format::x8D24UNORMPACK:return { FormatComponent::D };
        case Format::D32SFLOAT:return { FormatComponent::D };
        case Format::S8UINT:return { FormatComponent::S };
        case Format::D16UNORMS8UINT:return { FormatComponent::D, FormatComponent::S };
        case Format::D24UNORMS8UINT:return { FormatComponent::D, FormatComponent::S };
        case Format::D32SFLOATS8UINT:return { FormatComponent::D, FormatComponent::S };
        case Format::BC1RGBUNORMBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B };
        case Format::BC1RGBSRGBBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B };
        case Format::BC1RGBAUNORMBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::BC1RGBASRGBBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::BC2UNORMBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::BC2SRGBBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::BC3UNORMBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::BC3SRGBBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::BC4UNORMBLOCK:return { FormatComponent::R };
        case Format::BC4SNORMBLOCK:return { FormatComponent::R };
        case Format::BC5UNORMBLOCK:return { FormatComponent::R, FormatComponent::G };
        case Format::BC5SNORMBLOCK:return { FormatComponent::R, FormatComponent::G };
        case Format::BC6HUFLOATBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B };
        case Format::BC6HSFLOATBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B };
        case Format::BC7UNORMBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::BC7SRGBBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::ETC2RGB8UNORMBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B };
        case Format::ETC2RGB8SRGBBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B };
        case Format::ETC2RGB8A1UNORMBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::ETC2RGB8A1SRGBBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::ETC2RGBA8UNORMBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::ETC2RGBA8SRGBBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::EACR11UNORMBLOCK:return { FormatComponent::R };
        case Format::EACR11SNORMBLOCK:return { FormatComponent::R };
        case Format::EACRG11UNORMBLOCK:return { FormatComponent::R, FormatComponent::G };
        case Format::EACRG11SNORMBLOCK:return { FormatComponent::R, FormatComponent::G };
        case Format::ASTC4x4UNORMBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::ASTC4x4SRGBBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::ASTC5x4UNORMBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::ASTC5x4SRGBBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::ASTC5x5UNORMBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::ASTC5x5SRGBBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::ASTC6x5UNORMBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::ASTC6x5SRGBBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::ASTC6x6UNORMBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::ASTC6x6SRGBBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::ASTC8x5UNORMBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::ASTC8x5SRGBBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::ASTC8x6UNORMBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::ASTC8x6SRGBBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::ASTC8x8UNORMBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::ASTC8x8SRGBBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::ASTC10x5UNORMBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::ASTC10x5SRGBBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::ASTC10x6UNORMBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::ASTC10x6SRGBBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::ASTC10x8UNORMBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::ASTC10x8SRGBBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::ASTC10x10UNORMBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::ASTC10x10SRGBBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::ASTC12x10UNORMBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::ASTC12x10SRGBBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::ASTC12x12UNORMBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::ASTC12x12SRGBBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::GBGR8422UNORM:return { FormatComponent::G, FormatComponent::B, FormatComponent::G, FormatComponent::R };
        case Format::BGRG8422UNORM:return { FormatComponent::B, FormatComponent::G, FormatComponent::R, FormatComponent::G };
        case Format::GBR83PLANE420UNORM:return { FormatComponent::G, FormatComponent::B, FormatComponent::R };
        case Format::GBR82PLANE420UNORM:return { FormatComponent::G, FormatComponent::B, FormatComponent::R };
        case Format::GBR83PLANE422UNORM:return { FormatComponent::G, FormatComponent::B, FormatComponent::R };
        case Format::GBR82PLANE422UNORM:return { FormatComponent::G, FormatComponent::B, FormatComponent::R };
        case Format::GBR83PLANE444UNORM:return { FormatComponent::G, FormatComponent::B, FormatComponent::R };
        case Format::R10x6UNORMPACK16:return { FormatComponent::R };
        case Format::R10x6G10x6UNORM2PACK16:return { FormatComponent::R, FormatComponent::G };
        case Format::R10x6G10x6B10x6A10x6UNORM4PACK16:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::G10x6B10x6G10x6R10x6422UNORM4PACK16:return { FormatComponent::G, FormatComponent::B, FormatComponent::G, FormatComponent::R };
        case Format::B10x6G10x6R10x6G10x6422UNORM4PACK16:return { FormatComponent::B, FormatComponent::G, FormatComponent::R, FormatComponent::G };
        case Format::G10x6B10x6R10x63PLANE420UNORM3PACK16:return { FormatComponent::G, FormatComponent::B, FormatComponent::R };
        case Format::G10x6B10x6R10x62PLANE420UNORM3PACK16:return { FormatComponent::G, FormatComponent::B, FormatComponent::R };
        case Format::G10x6B10x6R10x63PLANE422UNORM3PACK16:return { FormatComponent::G, FormatComponent::B, FormatComponent::R };
        case Format::G10x6B10x6R10x62PLANE422UNORM3PACK16:return { FormatComponent::G, FormatComponent::B, FormatComponent::R };
        case Format::G10x6B10x6R10x63PLANE444UNORM3PACK16:return { FormatComponent::G, FormatComponent::B, FormatComponent::R };
        case Format::R12x4UNORMPACK16:return { FormatComponent::R };
        case Format::R12x4G12x4UNORM2PACK16:return { FormatComponent::R, FormatComponent::G };
        case Format::R12x4G12x4B12x4A12x4UNORM4PACK16:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::G12x4B12x4G12x4R12x4422UNORM4PACK16:return { FormatComponent::G, FormatComponent::B, FormatComponent::G, FormatComponent::R };
        case Format::B12x4G12x4R12x4G12x4422UNORM4PACK16:return { FormatComponent::B, FormatComponent::G, FormatComponent::R, FormatComponent::G };
        case Format::G12x4B12x4R12x43PLANE420UNORM3PACK16:return { FormatComponent::G, FormatComponent::B, FormatComponent::R };
        case Format::G12x4B12x4R12x42PLANE420UNORM3PACK16:return { FormatComponent::G, FormatComponent::B, FormatComponent::R };
        case Format::G12x4B12x4R12x43PLANE422UNORM3PACK16:return { FormatComponent::G, FormatComponent::B, FormatComponent::R };
        case Format::G12x4B12x4R12x42PLANE422UNORM3PACK16:return { FormatComponent::G, FormatComponent::B, FormatComponent::R };
        case Format::G12x4B12x4R12x43PLANE444UNORM3PACK16:return { FormatComponent::G, FormatComponent::B, FormatComponent::R };
        case Format::GBGR16422UNORM:return { FormatComponent::G, FormatComponent::B, FormatComponent::G, FormatComponent::R };
        case Format::BGRG16422UNORM:return { FormatComponent::B, FormatComponent::G, FormatComponent::R, FormatComponent::G };
        case Format::GBR163PLANE420UNORM:return { FormatComponent::G, FormatComponent::B, FormatComponent::R };
        case Format::GBR162PLANE420UNORM:return { FormatComponent::G, FormatComponent::B, FormatComponent::R };
        case Format::GBR163PLANE422UNORM:return { FormatComponent::G, FormatComponent::B, FormatComponent::R };
        case Format::GBR162PLANE422UNORM:return { FormatComponent::G, FormatComponent::B, FormatComponent::R };
        case Format::GBR163PLANE444UNORM:return { FormatComponent::G, FormatComponent::B, FormatComponent::R };
        case Format::GBR82PLANE444UNORM:return { FormatComponent::G, FormatComponent::B, FormatComponent::R };
        case Format::G10x6B10x6R10x62PLANE444UNORM3PACK16:return { FormatComponent::G, FormatComponent::B, FormatComponent::R };
        case Format::G12x4B12x4R12x42PLANE444UNORM3PACK16:return { FormatComponent::G, FormatComponent::B, FormatComponent::R };
        case Format::GBR162PLANE444UNORM:return { FormatComponent::G, FormatComponent::B, FormatComponent::R };
        case Format::ARGB4UNORMPACK16:return { FormatComponent::A, FormatComponent::R, FormatComponent::G, FormatComponent::B };
        case Format::ABGR4UNORMPACK16:return { FormatComponent::A, FormatComponent::B, FormatComponent::G, FormatComponent::R };
        case Format::ASTC4x4SFLOATBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::ASTC5x4SFLOATBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::ASTC5x5SFLOATBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::ASTC6x5SFLOATBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::ASTC6x6SFLOATBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::ASTC8x5SFLOATBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::ASTC8x6SFLOATBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::ASTC8x8SFLOATBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::ASTC10x5SFLOATBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::ASTC10x6SFLOATBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::ASTC10x8SFLOATBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::ASTC10x10SFLOATBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::ASTC12x10SFLOATBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::ASTC12x12SFLOATBLOCK:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::PVRTC12BPPUNORMBLOCKIMG:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::PVRTC14BPPUNORMBLOCKIMG:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::PVRTC22BPPUNORMBLOCKIMG:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::PVRTC24BPPUNORMBLOCKIMG:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::PVRTC12BPPSRGBBLOCKIMG:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::PVRTC14BPPSRGBBLOCKIMG:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::PVRTC22BPPSRGBBLOCKIMG:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::PVRTC24BPPSRGBBLOCKIMG:return { FormatComponent::R, FormatComponent::G, FormatComponent::B, FormatComponent::A };
        case Format::RG16S105:return { FormatComponent::R, FormatComponent::G };
        case Format::A1BGR5UNORMPACK16:return { FormatComponent::A, FormatComponent::B, FormatComponent::G, FormatComponent::R };
        case Format::A8UNORM:return { FormatComponent::A };
        default: return {};
        }
    }
    std::vector<int> GetFormatComponentsResolutions(Format format)
    {
        switch (format)
        {
        case Format::Undefined:return {};
        case Format::RG4UNORMPACKED:return { 4, 4 };
        case Format::RGBA4UNORMPACK:return { 4, 4, 4, 4 };
        case Format::BGRA4UNORMPACK:return { 4, 4, 4, 4 };
        case Format::R5G6B5UNORMPACK:return { 5, 6, 5 };
        case Format::B5G6R5UNORMPACK:return { 5, 6, 5 };
        case Format::RGB5A1UNORMPACK:return { 5, 5, 5, 1 };
        case Format::BGR5A1UNORMPACK:return { 5, 5, 5, 1 };
        case Format::A1RGB5UNORMPACK:return { 1, 5, 5, 5 };
        case Format::R8UNORM:return { 8 };
        case Format::R8SNORM:return { 8 };
        case Format::R8USCALED:return { 8 };
        case Format::R8SSCALED:return { 8 };
        case Format::R8UINT:return { 8 };
        case Format::R8SINT:return { 8 };
        case Format::R8SRGB:return { 8 };
        case Format::RG8UNORM:return { 8, 8 };
        case Format::RG8SNORM:return { 8, 8 };
        case Format::RG8USCALED:return { 8, 8 };
        case Format::RG8SSCALED:return { 8, 8 };
        case Format::RG8UINT:return { 8, 8 };
        case Format::RG8SINT:return { 8, 8 };
        case Format::RG8SRGB:return { 8, 8 };
        case Format::RGB8UNORM:return { 8, 8, 8 };
        case Format::RGB8SNORM:return { 8, 8, 8 };
        case Format::RGB8USCALED:return { 8, 8, 8 };
        case Format::RGB8SSCALED:return { 8, 8, 8 };
        case Format::RGB8UINT:return { 8, 8, 8 };
        case Format::RGB8SINT:return { 8, 8, 8 };
        case Format::RGB8SRGB:return { 8, 8, 8 };
        case Format::BGR8UNORM:return { 8, 8, 8 };
        case Format::BGR8SNORM:return { 8, 8, 8 };
        case Format::BGR8USCALED:return { 8, 8, 8 };
        case Format::BGR8SSCALED:return { 8, 8, 8 };
        case Format::BGR8UINT:return { 8, 8, 8 };
        case Format::BGR8SINT:return { 8, 8, 8 };
        case Format::BGR8SRGB:return { 8, 8, 8 };
        case Format::RGBA8UNORM:return { 8, 8, 8, 8 };
        case Format::RGBA8SNORM:return { 8, 8, 8, 8 };
        case Format::RGBA8USCALED:return { 8, 8, 8, 8 };
        case Format::RGBA8SSCALED:return { 8, 8, 8, 8 };
        case Format::RGBA8UINT:return { 8, 8, 8, 8 };
        case Format::RGBA8SINT:return { 8, 8, 8, 8 };
        case Format::RGBA8SRGB:return { 8, 8, 8, 8 };
        case Format::BGRA8UNORM:return { 8, 8, 8, 8 };
        case Format::BGRA8SNORM:return { 8, 8, 8, 8 };
        case Format::BGRA8USCALED:return { 8, 8, 8, 8 };
        case Format::BGRA8SSCALED:return { 8, 8, 8, 8 };
        case Format::BGRA8UINT:return { 8, 8, 8, 8 };
        case Format::BGRA8SINT:return { 8, 8, 8, 8 };
        case Format::BGRA8SRGB:return { 8, 8, 8, 8 };
        case Format::ABGR8UNORMPACK:return { 8, 8, 8, 8 };
        case Format::ABGR8SNORMPACK:return { 8, 8, 8, 8 };
        case Format::ABGR8USCALEDPACK:return { 8, 8, 8, 8 };
        case Format::ABGR8SSCALEDPACK:return { 8, 8, 8, 8 };
        case Format::ABGR8UINTPACK:return { 8, 8, 8, 8 };
        case Format::ABGR8SINTPACK:return { 8, 8, 8, 8 };
        case Format::ABGR8SRGBPACK:return { 8, 8, 8, 8 };
        case Format::A2RGB10UNORMPACK:return { 2, 10, 10, 10 };
        case Format::A2RGB10SNORMPACK:return { 2, 10, 10, 10 };
        case Format::A2RGB10USCALEDPACK:return { 2, 10, 10, 10 };
        case Format::A2RGB10SSCALEDPACK:return { 2, 10, 10, 10 };
        case Format::A2RGB10UINTPACK:return { 2, 10, 10, 10 };
        case Format::A2RGB10SINTPACK:return { 2, 10, 10, 10 };
        case Format::A2BGR10UNORMPACK:return { 2, 10, 10, 10 };
        case Format::A2BGR10SNORMPACK:return { 2, 10, 10, 10 };
        case Format::A2BGR10USCALEDPACK:return { 2, 10, 10, 10 };
        case Format::A2BGR10SSCALEDPACK:return { 2, 10, 10, 10 };
        case Format::A2BGR10UINTPACK:return { 2, 10, 10, 10 };
        case Format::A2BGR10SINTPACK:return { 2, 10, 10, 10 };
        case Format::R16UNORM:return { 16 };
        case Format::R16SNORM:return { 16 };
        case Format::R16USCALED:return { 16 };
        case Format::R16SSCALED:return { 16 };
        case Format::R16UINT:return { 16 };
        case Format::R16SINT:return { 16 };
        case Format::R16SFLOAT:return { 16 };
        case Format::RG16UNORM:return { 16, 16 };
        case Format::RG16SNORM:return { 16, 16 };
        case Format::RG16USCALED:return { 16, 16 };
        case Format::RG16SSCALED:return { 16, 16 };
        case Format::RG16UINT:return { 16, 16 };
        case Format::RG16SINT:return { 16, 16 };
        case Format::RG16SFLOAT:return { 16, 16 };
        case Format::RGB16UNORM:return { 16, 16, 16 };
        case Format::RGB16SNORM:return { 16, 16, 16 };
        case Format::RGB16USCALED:return { 16, 16, 16 };
        case Format::RGB16SSCALED:return { 16, 16, 16 };
        case Format::RGB16UINT:return { 16, 16, 16 };
        case Format::RGB16SINT:return { 16, 16, 16 };
        case Format::RGB16SFLOAT:return { 16, 16, 16 };
        case Format::RGBA16UNORM:return { 16, 16, 16, 16 };
        case Format::RGBA16SNORM:return { 16, 16, 16, 16 };
        case Format::RGBA16USCALED:return { 16, 16, 16, 16 };
        case Format::RGBA16SSCALED:return { 16, 16, 16, 16 };
        case Format::RGBA16UINT:return { 16, 16, 16, 16 };
        case Format::RGBA16SINT:return { 16, 16, 16, 16 };
        case Format::RGBA16SFLOAT:return { 16, 16, 16, 16 };
        case Format::R32UINT:return { 32 };
        case Format::R32SINT:return { 32 };
        case Format::R32SFLOAT:return { 32 };
        case Format::RG32UINT:return { 32, 32 };
        case Format::RG32SINT:return { 32, 32 };
        case Format::RG32SFLOAT:return { 32, 32 };
        case Format::RGB32UINT:return { 32, 32, 32 };
        case Format::RGB32SINT:return { 32, 32, 32 };
        case Format::RGB32SFLOAT:return { 32, 32, 32 };
        case Format::RGBA32UINT:return { 32, 32, 32, 32 };
        case Format::RGBA32SINT:return { 32, 32, 32, 32 };
        case Format::RGBA32SFLOAT:return { 32, 32, 32, 32 };
        case Format::R64UINT:return { 64 };
        case Format::R64SINT:return { 64 };
        case Format::R64SFLOAT:return { 64 };
        case Format::RG64UINT:return { 64, 64 };
        case Format::RG64SINT:return { 64, 64 };
        case Format::RG64SFLOAT:return { 64, 64 };
        case Format::RGB64UINT:return { 64, 64, 64 };
        case Format::RGB64SINT:return { 64, 64, 64 };
        case Format::RGB64SFLOAT:return { 64, 64, 64 };
        case Format::RGBA64UINT:return { 64, 64, 64, 64 };
        case Format::RGBA64SINT:return { 64, 64, 64, 64 };
        case Format::RGBA64SFLOAT:return { 64, 64, 64, 64 };
        case Format::B10GR11UFLOATPACK:return { 10, 11, 11 };
        case Format::E5BGR9UFLOATPACK:return { 5, 9, 9, 9 };
        case Format::D16UNORM:return { 16 };
        case Format::x8D24UNORMPACK:return { 8, 24 };
        case Format::D32SFLOAT:return { 32 };
        case Format::S8UINT:return { 8 };
        case Format::D16UNORMS8UINT:return { 16, 8 };
        case Format::D24UNORMS8UINT:return { 24, 8 };
        case Format::D32SFLOATS8UINT:return { 32, 8 };
        case Format::BC1RGBUNORMBLOCK:return { -1 };
        case Format::BC1RGBSRGBBLOCK:return { -1 };
        case Format::BC1RGBAUNORMBLOCK:return { -1 };
        case Format::BC1RGBASRGBBLOCK:return { -1 };
        case Format::BC2UNORMBLOCK:return { -1 };
        case Format::BC2SRGBBLOCK:return { -1 };
        case Format::BC3UNORMBLOCK:return { -1 };
        case Format::BC3SRGBBLOCK:return { -1 };
        case Format::BC4UNORMBLOCK:return { -1 };
        case Format::BC4SNORMBLOCK:return { -1 };
        case Format::BC5UNORMBLOCK:return { -1 };
        case Format::BC5SNORMBLOCK:return { -1 };
        case Format::BC6HUFLOATBLOCK:return { -1 };
        case Format::BC6HSFLOATBLOCK:return { -1 };
        case Format::BC7UNORMBLOCK:return { -1 };
        case Format::BC7SRGBBLOCK:return { -1 };
        case Format::ETC2RGB8UNORMBLOCK:return { -1 };
        case Format::ETC2RGB8SRGBBLOCK:return { -1 };
        case Format::ETC2RGB8A1UNORMBLOCK:return { -1, -1, -1, -1 };
        case Format::ETC2RGB8A1SRGBBLOCK:return { -1, -1, -1, -1 };
        case Format::ETC2RGBA8UNORMBLOCK:return { -1, -1, -1, -1 };
        case Format::ETC2RGBA8SRGBBLOCK:return { -1, -1, -1, -1 };
        case Format::EACR11UNORMBLOCK:return { -1 };
        case Format::EACR11SNORMBLOCK:return { -1 };
        case Format::EACRG11UNORMBLOCK:return { -1, -1 };
        case Format::EACRG11SNORMBLOCK:return { -1, -1 };
        case Format::ASTC4x4UNORMBLOCK:return { -1, -1, -1, -1 };
        case Format::ASTC4x4SRGBBLOCK:return { -1, -1, -1, -1 };
        case Format::ASTC5x4UNORMBLOCK:return { -1, -1, -1, -1 };
        case Format::ASTC5x4SRGBBLOCK:return { -1, -1, -1, -1 };
        case Format::ASTC5x5UNORMBLOCK:return { -1, -1, -1, -1 };
        case Format::ASTC5x5SRGBBLOCK:return { -1, -1, -1, -1 };
        case Format::ASTC6x5UNORMBLOCK:return { -1, -1, -1, -1 };
        case Format::ASTC6x5SRGBBLOCK:return { -1, -1, -1, -1 };
        case Format::ASTC6x6UNORMBLOCK:return { -1, -1, -1, -1 };
        case Format::ASTC6x6SRGBBLOCK:return { -1, -1, -1, -1 };
        case Format::ASTC8x5UNORMBLOCK:return { -1, -1, -1, -1 };
        case Format::ASTC8x5SRGBBLOCK:return { -1, -1, -1, -1 };
        case Format::ASTC8x6UNORMBLOCK:return { -1, -1, -1, -1 };
        case Format::ASTC8x6SRGBBLOCK:return { -1, -1, -1, -1 };
        case Format::ASTC8x8UNORMBLOCK:return { -1, -1, -1, -1 };
        case Format::ASTC8x8SRGBBLOCK:return { -1, -1, -1, -1 };
        case Format::ASTC10x5UNORMBLOCK:return { -1, -1, -1, -1 };
        case Format::ASTC10x5SRGBBLOCK:return { -1, -1, -1, -1 };
        case Format::ASTC10x6UNORMBLOCK:return { -1, -1, -1, -1 };
        case Format::ASTC10x6SRGBBLOCK:return { -1, -1, -1, -1 };
        case Format::ASTC10x8UNORMBLOCK:return { -1, -1, -1, -1 };
        case Format::ASTC10x8SRGBBLOCK:return { -1, -1, -1, -1 };
        case Format::ASTC10x10UNORMBLOCK:return { -1, -1, -1, -1 };
        case Format::ASTC10x10SRGBBLOCK:return { -1, -1, -1, -1 };
        case Format::ASTC12x10UNORMBLOCK:return { -1, -1, -1, -1 };
        case Format::ASTC12x10SRGBBLOCK:return { -1, -1, -1, -1 };
        case Format::ASTC12x12UNORMBLOCK:return { -1, -1, -1, -1 };
        case Format::ASTC12x12SRGBBLOCK:return { -1, -1, -1, -1 };
        case Format::GBGR8422UNORM:return { 8, 4, 8, 4 };
        case Format::BGRG8422UNORM:return { 8, 4, 8, 4 };
        case Format::GBR83PLANE420UNORM:return { 8, 8, 8 };
        case Format::GBR82PLANE420UNORM:return { 8, 8 };
        case Format::GBR83PLANE422UNORM:return { 8, 8, 8 };
        case Format::GBR82PLANE422UNORM:return { 8, 8 };
        case Format::GBR83PLANE444UNORM:return { 8, 8, 8 };
        case Format::R10x6UNORMPACK16:return { 10 };
        case Format::R10x6G10x6UNORM2PACK16:return { 10, 10 };
        case Format::R10x6G10x6B10x6A10x6UNORM4PACK16:return { 10, 10, 10, 10 };
        case Format::G10x6B10x6G10x6R10x6422UNORM4PACK16:return { 10, 10, 10, 10 };
        case Format::B10x6G10x6R10x6G10x6422UNORM4PACK16:return { 10, 10, 10, 10 };
        case Format::G10x6B10x6R10x63PLANE420UNORM3PACK16:return { 10, 10, 10 };
        case Format::G10x6B10x6R10x62PLANE420UNORM3PACK16:return { 10, 10 };
        case Format::G10x6B10x6R10x63PLANE422UNORM3PACK16:return { 10, 10, 10 };
        case Format::G10x6B10x6R10x62PLANE422UNORM3PACK16:return { 10, 10 };
        case Format::G10x6B10x6R10x63PLANE444UNORM3PACK16:return { 10, 10, 10 };
        case Format::R12x4UNORMPACK16:return { 12 };
        case Format::R12x4G12x4UNORM2PACK16:return { 12, 12 };
        case Format::R12x4G12x4B12x4A12x4UNORM4PACK16:return { 12, 12, 12, 12 };
        case Format::G12x4B12x4G12x4R12x4422UNORM4PACK16:return { 12, 12, 12, 12 };
        case Format::B12x4G12x4R12x4G12x4422UNORM4PACK16:return { 12, 12, 12, 12 };
        case Format::G12x4B12x4R12x43PLANE420UNORM3PACK16:return { 12, 12, 12 };
        case Format::G12x4B12x4R12x42PLANE420UNORM3PACK16:return { 12, 12 };
        case Format::G12x4B12x4R12x43PLANE422UNORM3PACK16:return { 12, 12, 12 };
        case Format::G12x4B12x4R12x42PLANE422UNORM3PACK16:return { 12, 12 };
        case Format::G12x4B12x4R12x43PLANE444UNORM3PACK16:return { 12, 12, 12 };
        case Format::GBGR16422UNORM:return { 16, 4, 16, 4 };
        case Format::BGRG16422UNORM:return { 16, 4, 16, 4 };
        case Format::GBR163PLANE420UNORM:return { 16, 16, 16 };
        case Format::GBR162PLANE420UNORM:return { 16, 16 };
        case Format::GBR163PLANE422UNORM:return { 16, 16, 16 };
        case Format::GBR162PLANE422UNORM:return { 16, 16 };
        case Format::GBR163PLANE444UNORM:return { 16, 16, 16 };
        case Format::GBR82PLANE444UNORM:return { 8, 8, 8 };
        case Format::G10x6B10x6R10x62PLANE444UNORM3PACK16:return { 10, 10, 10 };
        case Format::G12x4B12x4R12x42PLANE444UNORM3PACK16:return { 12, 12, 12 };
        case Format::GBR162PLANE444UNORM:return { 16, 16 };
        case Format::ARGB4UNORMPACK16:return { 4, 4, 4, 4 };
        case Format::ABGR4UNORMPACK16:return { 4, 4, 4, 4 };
        case Format::ASTC4x4SFLOATBLOCK:return { -1, -1, -1, -1 };
        case Format::ASTC5x4SFLOATBLOCK:return { -1, -1, -1, -1 };
        case Format::ASTC5x5SFLOATBLOCK:return { -1, -1, -1, -1 };
        case Format::ASTC6x5SFLOATBLOCK:return { -1, -1, -1, -1 };
        case Format::ASTC6x6SFLOATBLOCK:return { -1, -1, -1, -1 };
        case Format::ASTC8x5SFLOATBLOCK:return { -1, -1, -1, -1 };
        case Format::ASTC8x6SFLOATBLOCK:return { -1, -1, -1, -1 };
        case Format::ASTC8x8SFLOATBLOCK:return { -1, -1, -1, -1 };
        case Format::ASTC10x5SFLOATBLOCK:return { -1, -1, -1, -1 };
        case Format::ASTC10x6SFLOATBLOCK:return { -1, -1, -1, -1 };
        case Format::ASTC10x8SFLOATBLOCK:return { -1, -1, -1, -1 };
        case Format::ASTC10x10SFLOATBLOCK:return { -1, -1, -1, -1 };
        case Format::ASTC12x10SFLOATBLOCK:return { -1, -1, -1, -1 };
        case Format::ASTC12x12SFLOATBLOCK:return { -1, -1, -1, -1 };
        case Format::PVRTC12BPPUNORMBLOCKIMG:return { -1, -1, -1, -1 };
        case Format::PVRTC14BPPUNORMBLOCKIMG:return { -1, -1, -1, -1 };
        case Format::PVRTC22BPPUNORMBLOCKIMG:return { -1, -1, -1, -1 };
        case Format::PVRTC24BPPUNORMBLOCKIMG:return { -1, -1, -1, -1 };
        case Format::PVRTC12BPPSRGBBLOCKIMG:return { -1, -1, -1, -1 };
        case Format::PVRTC14BPPSRGBBLOCKIMG:return { -1, -1, -1, -1 };
        case Format::PVRTC22BPPSRGBBLOCKIMG:return { -1, -1, -1, -1 };
        case Format::PVRTC24BPPSRGBBLOCKIMG:return { -1, -1, -1, -1 };
        case Format::RG16S105:return { 16, 16 };
        case Format::A1BGR5UNORMPACK16:return { 1, 5, 5, 5 };
        case Format::A8UNORM:return { 8 };
        default: return {};
        }
    }

    int GetFormatComponentResolutions(Format format, FormatComponent component)
    {
        std::vector<FormatComponent> availableComponents = GetComponents(format);
        std::vector<int> resolutions = GetFormatComponentsResolutions(format);
        for (int i = availableComponents.size() - 1; i >= 0; i--)
        {
            if (component == availableComponents[i])
                return resolutions[i];
        }

        return 0;
    }

    int GetFormatResolutions(Format format)
    {
        auto resolutions = GetFormatComponentsResolutions(format);
        int sum = 0;
        for (auto&& bit : resolutions)
        {
            if (bit == -1)
                return -1;

            sum += bit;
        }

        return sum;
    }

    bool IsFormatUnsigned(Format format)
    {
        switch (format)
        {
        case Format::Undefined:return false;
        case Format::RG4UNORMPACKED:return true;
        case Format::RGBA4UNORMPACK:return true;
        case Format::BGRA4UNORMPACK:return true;
        case Format::R5G6B5UNORMPACK:return true;
        case Format::B5G6R5UNORMPACK:return true;
        case Format::RGB5A1UNORMPACK:return true;
        case Format::BGR5A1UNORMPACK:return true;
        case Format::A1RGB5UNORMPACK:return true;
        case Format::R8UNORM:return true;
        case Format::R8SNORM:return false;
        case Format::R8USCALED:return true;
        case Format::R8SSCALED:return false;
        case Format::R8UINT:return true;
        case Format::R8SINT:return false;
        case Format::R8SRGB:return true;
        case Format::RG8UNORM:return true;
        case Format::RG8SNORM:return false;
        case Format::RG8USCALED:return true;
        case Format::RG8SSCALED:return false;
        case Format::RG8UINT:return true;
        case Format::RG8SINT:return false;
        case Format::RG8SRGB:return true;
        case Format::RGB8UNORM:return true;
        case Format::RGB8SNORM:return false;
        case Format::RGB8USCALED:return true;
        case Format::RGB8SSCALED:return false;
        case Format::RGB8UINT:return true;
        case Format::RGB8SINT:return false;
        case Format::RGB8SRGB:return true;
        case Format::BGR8UNORM:return true;
        case Format::BGR8SNORM:return false;
        case Format::BGR8USCALED:return true;
        case Format::BGR8SSCALED:return false;
        case Format::BGR8UINT:return true;
        case Format::BGR8SINT:return false;
        case Format::BGR8SRGB:return true;
        case Format::RGBA8UNORM:return true;
        case Format::RGBA8SNORM:return false;
        case Format::RGBA8USCALED:return true;
        case Format::RGBA8SSCALED:return false;
        case Format::RGBA8UINT:return true;
        case Format::RGBA8SINT:return false;
        case Format::RGBA8SRGB:return true;
        case Format::BGRA8UNORM:return true;
        case Format::BGRA8SNORM:return false;
        case Format::BGRA8USCALED:return true;
        case Format::BGRA8SSCALED:return false;
        case Format::BGRA8UINT:return true;
        case Format::BGRA8SINT:return false;
        case Format::BGRA8SRGB:return true;
        case Format::ABGR8UNORMPACK:return true;
        case Format::ABGR8SNORMPACK:return false;
        case Format::ABGR8USCALEDPACK:return true;
        case Format::ABGR8SSCALEDPACK:return false;
        case Format::ABGR8UINTPACK:return true;
        case Format::ABGR8SINTPACK:return false;
        case Format::ABGR8SRGBPACK:return true;
        case Format::A2RGB10UNORMPACK:return true;
        case Format::A2RGB10SNORMPACK:return false;
        case Format::A2RGB10USCALEDPACK:return true;
        case Format::A2RGB10SSCALEDPACK:return false;
        case Format::A2RGB10UINTPACK:return true;
        case Format::A2RGB10SINTPACK:return false;
        case Format::A2BGR10UNORMPACK:return true;
        case Format::A2BGR10SNORMPACK:return false;
        case Format::A2BGR10USCALEDPACK:return true;
        case Format::A2BGR10SSCALEDPACK:return false;
        case Format::A2BGR10UINTPACK:return true;
        case Format::A2BGR10SINTPACK:return false;
        case Format::R16UNORM:return true;
        case Format::R16SNORM:return false;
        case Format::R16USCALED:return true;
        case Format::R16SSCALED:return false;
        case Format::R16UINT:return true;
        case Format::R16SINT:return false;
        case Format::R16SFLOAT:return false;
        case Format::RG16UNORM:return true;
        case Format::RG16SNORM:return false;
        case Format::RG16USCALED:return true;
        case Format::RG16SSCALED:return false;
        case Format::RG16UINT:return true;
        case Format::RG16SINT:return false;
        case Format::RG16SFLOAT:return false;
        case Format::RGB16UNORM:return true;
        case Format::RGB16SNORM:return false;
        case Format::RGB16USCALED:return true;
        case Format::RGB16SSCALED:return false;
        case Format::RGB16UINT:return true;
        case Format::RGB16SINT:return false;
        case Format::RGB16SFLOAT:return false;
        case Format::RGBA16UNORM:return true;
        case Format::RGBA16SNORM:return false;
        case Format::RGBA16USCALED:return true;
        case Format::RGBA16SSCALED:return false;
        case Format::RGBA16UINT:return true;
        case Format::RGBA16SINT:return false;
        case Format::RGBA16SFLOAT:return false;
        case Format::R32UINT:return true;
        case Format::R32SINT:return false;
        case Format::R32SFLOAT:return false;
        case Format::RG32UINT:return true;
        case Format::RG32SINT:return false;
        case Format::RG32SFLOAT:return false;
        case Format::RGB32UINT:return true;
        case Format::RGB32SINT:return false;
        case Format::RGB32SFLOAT:return false;
        case Format::RGBA32UINT:return true;
        case Format::RGBA32SINT:return false;
        case Format::RGBA32SFLOAT:return false;
        case Format::R64UINT:return true;
        case Format::R64SINT:return false;
        case Format::R64SFLOAT:return false;
        case Format::RG64UINT:return true;
        case Format::RG64SINT:return false;
        case Format::RG64SFLOAT:return false;
        case Format::RGB64UINT:return true;
        case Format::RGB64SINT:return false;
        case Format::RGB64SFLOAT:return false;
        case Format::RGBA64UINT:return true;
        case Format::RGBA64SINT:return false;
        case Format::RGBA64SFLOAT:return false;
        case Format::B10GR11UFLOATPACK:return true;
        case Format::E5BGR9UFLOATPACK:return true;
        case Format::D16UNORM:return true;
        case Format::x8D24UNORMPACK:return true;
        case Format::D32SFLOAT:return false;
        case Format::S8UINT:return true;
        case Format::D16UNORMS8UINT:return true;
        case Format::D24UNORMS8UINT:return true;
        case Format::D32SFLOATS8UINT:return true;
        case Format::BC1RGBUNORMBLOCK:return true;
        case Format::BC1RGBSRGBBLOCK:return true;
        case Format::BC1RGBAUNORMBLOCK:return true;
        case Format::BC1RGBASRGBBLOCK:return true;
        case Format::BC2UNORMBLOCK:return true;
        case Format::BC2SRGBBLOCK:return true;
        case Format::BC3UNORMBLOCK:return true;
        case Format::BC3SRGBBLOCK:return true;
        case Format::BC4UNORMBLOCK:return true;
        case Format::BC4SNORMBLOCK:return false;
        case Format::BC5UNORMBLOCK:return true;
        case Format::BC5SNORMBLOCK:return false;
        case Format::BC6HUFLOATBLOCK:return true;
        case Format::BC6HSFLOATBLOCK:return false;
        case Format::BC7UNORMBLOCK:return true;
        case Format::BC7SRGBBLOCK:return true;
        case Format::ETC2RGB8UNORMBLOCK:return true;
        case Format::ETC2RGB8SRGBBLOCK:return true;
        case Format::ETC2RGB8A1UNORMBLOCK:return true;
        case Format::ETC2RGB8A1SRGBBLOCK:return true;
        case Format::ETC2RGBA8UNORMBLOCK:return true;
        case Format::ETC2RGBA8SRGBBLOCK:return true;
        case Format::EACR11UNORMBLOCK:return true;
        case Format::EACR11SNORMBLOCK:return false;
        case Format::EACRG11UNORMBLOCK:return true;
        case Format::EACRG11SNORMBLOCK:return false;
        case Format::ASTC4x4UNORMBLOCK:return true;
        case Format::ASTC4x4SRGBBLOCK:return true;
        case Format::ASTC5x4UNORMBLOCK:return true;
        case Format::ASTC5x4SRGBBLOCK:return true;
        case Format::ASTC5x5UNORMBLOCK:return true;
        case Format::ASTC5x5SRGBBLOCK:return true;
        case Format::ASTC6x5UNORMBLOCK:return true;
        case Format::ASTC6x5SRGBBLOCK:return true;
        case Format::ASTC6x6UNORMBLOCK:return true;
        case Format::ASTC6x6SRGBBLOCK:return true;
        case Format::ASTC8x5UNORMBLOCK:return true;
        case Format::ASTC8x5SRGBBLOCK:return true;
        case Format::ASTC8x6UNORMBLOCK:return true;
        case Format::ASTC8x6SRGBBLOCK:return true;
        case Format::ASTC8x8UNORMBLOCK:return true;
        case Format::ASTC8x8SRGBBLOCK:return true;
        case Format::ASTC10x5UNORMBLOCK:return true;
        case Format::ASTC10x5SRGBBLOCK:return true;
        case Format::ASTC10x6UNORMBLOCK:return true;
        case Format::ASTC10x6SRGBBLOCK:return true;
        case Format::ASTC10x8UNORMBLOCK:return true;
        case Format::ASTC10x8SRGBBLOCK:return true;
        case Format::ASTC10x10UNORMBLOCK:return true;
        case Format::ASTC10x10SRGBBLOCK:return true;
        case Format::ASTC12x10UNORMBLOCK:return true;
        case Format::ASTC12x10SRGBBLOCK:return true;
        case Format::ASTC12x12UNORMBLOCK:return true;
        case Format::ASTC12x12SRGBBLOCK:return true;
        case Format::GBGR8422UNORM:return true;
        case Format::BGRG8422UNORM:return true;
        case Format::GBR83PLANE420UNORM:return true;
        case Format::GBR82PLANE420UNORM:return true;
        case Format::GBR83PLANE422UNORM:return true;
        case Format::GBR82PLANE422UNORM:return true;
        case Format::GBR83PLANE444UNORM:return true;
        case Format::R10x6UNORMPACK16:return true;
        case Format::R10x6G10x6UNORM2PACK16:return true;
        case Format::R10x6G10x6B10x6A10x6UNORM4PACK16:return true;
        case Format::G10x6B10x6G10x6R10x6422UNORM4PACK16:return true;
        case Format::B10x6G10x6R10x6G10x6422UNORM4PACK16:return true;
        case Format::G10x6B10x6R10x63PLANE420UNORM3PACK16:return true;
        case Format::G10x6B10x6R10x62PLANE420UNORM3PACK16:return true;
        case Format::G10x6B10x6R10x63PLANE422UNORM3PACK16:return true;
        case Format::G10x6B10x6R10x62PLANE422UNORM3PACK16:return true;
        case Format::G10x6B10x6R10x63PLANE444UNORM3PACK16:return true;
        case Format::R12x4UNORMPACK16:return true;
        case Format::R12x4G12x4UNORM2PACK16:return true;
        case Format::R12x4G12x4B12x4A12x4UNORM4PACK16:return true;
        case Format::G12x4B12x4G12x4R12x4422UNORM4PACK16:return true;
        case Format::B12x4G12x4R12x4G12x4422UNORM4PACK16:return true;
        case Format::G12x4B12x4R12x43PLANE420UNORM3PACK16:return true;
        case Format::G12x4B12x4R12x42PLANE420UNORM3PACK16:return true;
        case Format::G12x4B12x4R12x43PLANE422UNORM3PACK16:return true;
        case Format::G12x4B12x4R12x42PLANE422UNORM3PACK16:return true;
        case Format::G12x4B12x4R12x43PLANE444UNORM3PACK16:return true;
        case Format::GBGR16422UNORM:return true;
        case Format::BGRG16422UNORM:return true;
        case Format::GBR163PLANE420UNORM:return true;
        case Format::GBR162PLANE420UNORM:return true;
        case Format::GBR163PLANE422UNORM:return true;
        case Format::GBR162PLANE422UNORM:return true;
        case Format::GBR163PLANE444UNORM:return true;
        case Format::GBR82PLANE444UNORM:return true;
        case Format::G10x6B10x6R10x62PLANE444UNORM3PACK16:return true;
        case Format::G12x4B12x4R12x42PLANE444UNORM3PACK16:return true;
        case Format::GBR162PLANE444UNORM:return true;
        case Format::ARGB4UNORMPACK16:return true;
        case Format::ABGR4UNORMPACK16:return true;
        case Format::ASTC4x4SFLOATBLOCK:return false;
        case Format::ASTC5x4SFLOATBLOCK:return false;
        case Format::ASTC5x5SFLOATBLOCK:return false;
        case Format::ASTC6x5SFLOATBLOCK:return false;
        case Format::ASTC6x6SFLOATBLOCK:return false;
        case Format::ASTC8x5SFLOATBLOCK:return false;
        case Format::ASTC8x6SFLOATBLOCK:return false;
        case Format::ASTC8x8SFLOATBLOCK:return false;
        case Format::ASTC10x5SFLOATBLOCK:return false;
        case Format::ASTC10x6SFLOATBLOCK:return false;
        case Format::ASTC10x8SFLOATBLOCK:return false;
        case Format::ASTC10x10SFLOATBLOCK:return false;
        case Format::ASTC12x10SFLOATBLOCK:return false;
        case Format::ASTC12x12SFLOATBLOCK:return false;
        case Format::PVRTC12BPPUNORMBLOCKIMG:return true;
        case Format::PVRTC14BPPUNORMBLOCKIMG:return true;
        case Format::PVRTC22BPPUNORMBLOCKIMG:return true;
        case Format::PVRTC24BPPUNORMBLOCKIMG:return true;
        case Format::PVRTC12BPPSRGBBLOCKIMG:return true;
        case Format::PVRTC14BPPSRGBBLOCKIMG:return true;
        case Format::PVRTC22BPPSRGBBLOCKIMG:return true;
        case Format::PVRTC24BPPSRGBBLOCKIMG:return true;
        case Format::RG16S105:return false;
        case Format::A1BGR5UNORMPACK16:return true;
        case Format::A8UNORM:return true;
        default: return false;
        }
    }

    bool IsFormatIntegral(Format format)
    {
        switch (format)
        {
        case Format::Undefined:return false;
        case Format::RG4UNORMPACKED:return false;
        case Format::RGBA4UNORMPACK:return false;
        case Format::BGRA4UNORMPACK:return false;
        case Format::R5G6B5UNORMPACK:return false;
        case Format::B5G6R5UNORMPACK:return false;
        case Format::RGB5A1UNORMPACK:return false;
        case Format::BGR5A1UNORMPACK:return false;
        case Format::A1RGB5UNORMPACK:return false;
        case Format::R8UNORM:return false;
        case Format::R8SNORM:return false;
        case Format::R8USCALED:return true;
        case Format::R8SSCALED:return true;
        case Format::R8UINT:return true;
        case Format::R8SINT:return true;
        case Format::R8SRGB:return false;
        case Format::RG8UNORM:return false;
        case Format::RG8SNORM:return false;
        case Format::RG8USCALED:return true;
        case Format::RG8SSCALED:return true;
        case Format::RG8UINT:return true;
        case Format::RG8SINT:return true;
        case Format::RG8SRGB:return false;
        case Format::RGB8UNORM:return false;
        case Format::RGB8SNORM:return false;
        case Format::RGB8USCALED:return true;
        case Format::RGB8SSCALED:return true;
        case Format::RGB8UINT:return true;
        case Format::RGB8SINT:return true;
        case Format::RGB8SRGB:return false;
        case Format::BGR8UNORM:return false;
        case Format::BGR8SNORM:return false;
        case Format::BGR8USCALED:return true;
        case Format::BGR8SSCALED:return true;
        case Format::BGR8UINT:return true;
        case Format::BGR8SINT:return true;
        case Format::BGR8SRGB:return false;
        case Format::RGBA8UNORM:return false;
        case Format::RGBA8SNORM:return false;
        case Format::RGBA8USCALED:return true;
        case Format::RGBA8SSCALED:return true;
        case Format::RGBA8UINT:return true;
        case Format::RGBA8SINT:return true;
        case Format::RGBA8SRGB:return false;
        case Format::BGRA8UNORM:return false;
        case Format::BGRA8SNORM:return false;
        case Format::BGRA8USCALED:return true;
        case Format::BGRA8SSCALED:return true;
        case Format::BGRA8UINT:return true;
        case Format::BGRA8SINT:return true;
        case Format::BGRA8SRGB:return false;
        case Format::ABGR8UNORMPACK:return false;
        case Format::ABGR8SNORMPACK:return false;
        case Format::ABGR8USCALEDPACK:return true;
        case Format::ABGR8SSCALEDPACK:return true;
        case Format::ABGR8UINTPACK:return true;
        case Format::ABGR8SINTPACK:return true;
        case Format::ABGR8SRGBPACK:return false;
        case Format::A2RGB10UNORMPACK:return false;
        case Format::A2RGB10SNORMPACK:return false;
        case Format::A2RGB10USCALEDPACK:return true;
        case Format::A2RGB10SSCALEDPACK:return true;
        case Format::A2RGB10UINTPACK:return true;
        case Format::A2RGB10SINTPACK:return true;
        case Format::A2BGR10UNORMPACK:return false;
        case Format::A2BGR10SNORMPACK:return false;
        case Format::A2BGR10USCALEDPACK:return true;
        case Format::A2BGR10SSCALEDPACK:return true;
        case Format::A2BGR10UINTPACK:return true;
        case Format::A2BGR10SINTPACK:return true;
        case Format::R16UNORM:return false;
        case Format::R16SNORM:return false;
        case Format::R16USCALED:return true;
        case Format::R16SSCALED:return true;
        case Format::R16UINT:return true;
        case Format::R16SINT:return true;
        case Format::R16SFLOAT:return false;
        case Format::RG16UNORM:return false;
        case Format::RG16SNORM:return false;
        case Format::RG16USCALED:return true;
        case Format::RG16SSCALED:return true;
        case Format::RG16UINT:return true;
        case Format::RG16SINT:return true;
        case Format::RG16SFLOAT:return false;
        case Format::RGB16UNORM:return false;
        case Format::RGB16SNORM:return false;
        case Format::RGB16USCALED:return true;
        case Format::RGB16SSCALED:return true;
        case Format::RGB16UINT:return true;
        case Format::RGB16SINT:return true;
        case Format::RGB16SFLOAT:return false;
        case Format::RGBA16UNORM:return false;
        case Format::RGBA16SNORM:return false;
        case Format::RGBA16USCALED:return true;
        case Format::RGBA16SSCALED:return true;
        case Format::RGBA16UINT:return true;
        case Format::RGBA16SINT:return true;
        case Format::RGBA16SFLOAT:return false;
        case Format::R32UINT:return true;
        case Format::R32SINT:return true;
        case Format::R32SFLOAT:return false;
        case Format::RG32UINT:return true;
        case Format::RG32SINT:return true;
        case Format::RG32SFLOAT:return false;
        case Format::RGB32UINT:return true;
        case Format::RGB32SINT:return true;
        case Format::RGB32SFLOAT:return false;
        case Format::RGBA32UINT:return true;
        case Format::RGBA32SINT:return true;
        case Format::RGBA32SFLOAT:return false;
        case Format::R64UINT:return true;
        case Format::R64SINT:return true;
        case Format::R64SFLOAT:return false;
        case Format::RG64UINT:return true;
        case Format::RG64SINT:return true;
        case Format::RG64SFLOAT:return false;
        case Format::RGB64UINT:return true;
        case Format::RGB64SINT:return true;
        case Format::RGB64SFLOAT:return false;
        case Format::RGBA64UINT:return true;
        case Format::RGBA64SINT:return true;
        case Format::RGBA64SFLOAT:return false;
        case Format::B10GR11UFLOATPACK:return true;
        case Format::E5BGR9UFLOATPACK:return true;
        case Format::D16UNORM:return false;
        case Format::x8D24UNORMPACK:return false;
        case Format::D32SFLOAT:return false;
        case Format::S8UINT:return true;
        case Format::D16UNORMS8UINT:return true;
        case Format::D24UNORMS8UINT:return true;
        case Format::D32SFLOATS8UINT:return true;
        case Format::BC1RGBUNORMBLOCK:return false;
        case Format::BC1RGBSRGBBLOCK:return false;
        case Format::BC1RGBAUNORMBLOCK:return false;
        case Format::BC1RGBASRGBBLOCK:return false;
        case Format::BC2UNORMBLOCK:return false;
        case Format::BC2SRGBBLOCK:return false;
        case Format::BC3UNORMBLOCK:return false;
        case Format::BC3SRGBBLOCK:return false;
        case Format::BC4UNORMBLOCK:return false;
        case Format::BC4SNORMBLOCK:return false;
        case Format::BC5UNORMBLOCK:return false;
        case Format::BC5SNORMBLOCK:return false;
        case Format::BC6HUFLOATBLOCK:return true;
        case Format::BC6HSFLOATBLOCK:return false;
        case Format::BC7UNORMBLOCK:return false;
        case Format::BC7SRGBBLOCK:return false;
        case Format::ETC2RGB8UNORMBLOCK:return false;
        case Format::ETC2RGB8SRGBBLOCK:return false;
        case Format::ETC2RGB8A1UNORMBLOCK:return false;
        case Format::ETC2RGB8A1SRGBBLOCK:return false;
        case Format::ETC2RGBA8UNORMBLOCK:return false;
        case Format::ETC2RGBA8SRGBBLOCK:return false;
        case Format::EACR11UNORMBLOCK:return false;
        case Format::EACR11SNORMBLOCK:return false;
        case Format::EACRG11UNORMBLOCK:return false;
        case Format::EACRG11SNORMBLOCK:return false;
        case Format::ASTC4x4UNORMBLOCK:return false;
        case Format::ASTC4x4SRGBBLOCK:return false;
        case Format::ASTC5x4UNORMBLOCK:return false;
        case Format::ASTC5x4SRGBBLOCK:return false;
        case Format::ASTC5x5UNORMBLOCK:return false;
        case Format::ASTC5x5SRGBBLOCK:return false;
        case Format::ASTC6x5UNORMBLOCK:return false;
        case Format::ASTC6x5SRGBBLOCK:return false;
        case Format::ASTC6x6UNORMBLOCK:return false;
        case Format::ASTC6x6SRGBBLOCK:return false;
        case Format::ASTC8x5UNORMBLOCK:return false;
        case Format::ASTC8x5SRGBBLOCK:return false;
        case Format::ASTC8x6UNORMBLOCK:return false;
        case Format::ASTC8x6SRGBBLOCK:return false;
        case Format::ASTC8x8UNORMBLOCK:return false;
        case Format::ASTC8x8SRGBBLOCK:return false;
        case Format::ASTC10x5UNORMBLOCK:return false;
        case Format::ASTC10x5SRGBBLOCK:return false;
        case Format::ASTC10x6UNORMBLOCK:return false;
        case Format::ASTC10x6SRGBBLOCK:return false;
        case Format::ASTC10x8UNORMBLOCK:return false;
        case Format::ASTC10x8SRGBBLOCK:return false;
        case Format::ASTC10x10UNORMBLOCK:return false;
        case Format::ASTC10x10SRGBBLOCK:return false;
        case Format::ASTC12x10UNORMBLOCK:return false;
        case Format::ASTC12x10SRGBBLOCK:return false;
        case Format::ASTC12x12UNORMBLOCK:return false;
        case Format::ASTC12x12SRGBBLOCK:return false;
        case Format::GBGR8422UNORM:return false;
        case Format::BGRG8422UNORM:return false;
        case Format::GBR83PLANE420UNORM:return false;
        case Format::GBR82PLANE420UNORM:return false;
        case Format::GBR83PLANE422UNORM:return false;
        case Format::GBR82PLANE422UNORM:return false;
        case Format::GBR83PLANE444UNORM:return false;
        case Format::R10x6UNORMPACK16:return false;
        case Format::R10x6G10x6UNORM2PACK16:return false;
        case Format::R10x6G10x6B10x6A10x6UNORM4PACK16:return false;
        case Format::G10x6B10x6G10x6R10x6422UNORM4PACK16:return false;
        case Format::B10x6G10x6R10x6G10x6422UNORM4PACK16:return false;
        case Format::G10x6B10x6R10x63PLANE420UNORM3PACK16:return false;
        case Format::G10x6B10x6R10x62PLANE420UNORM3PACK16:return false;
        case Format::G10x6B10x6R10x63PLANE422UNORM3PACK16:return false;
        case Format::G10x6B10x6R10x62PLANE422UNORM3PACK16:return false;
        case Format::G10x6B10x6R10x63PLANE444UNORM3PACK16:return false;
        case Format::R12x4UNORMPACK16:return false;
        case Format::R12x4G12x4UNORM2PACK16:return false;
        case Format::R12x4G12x4B12x4A12x4UNORM4PACK16:return false;
        case Format::G12x4B12x4G12x4R12x4422UNORM4PACK16:return false;
        case Format::B12x4G12x4R12x4G12x4422UNORM4PACK16:return false;
        case Format::G12x4B12x4R12x43PLANE420UNORM3PACK16:return false;
        case Format::G12x4B12x4R12x42PLANE420UNORM3PACK16:return false;
        case Format::G12x4B12x4R12x43PLANE422UNORM3PACK16:return false;
        case Format::G12x4B12x4R12x42PLANE422UNORM3PACK16:return false;
        case Format::G12x4B12x4R12x43PLANE444UNORM3PACK16:return false;
        case Format::GBGR16422UNORM:return false;
        case Format::BGRG16422UNORM:return false;
        case Format::GBR163PLANE420UNORM:return false;
        case Format::GBR162PLANE420UNORM:return false;
        case Format::GBR163PLANE422UNORM:return false;
        case Format::GBR162PLANE422UNORM:return false;
        case Format::GBR163PLANE444UNORM:return false;
        case Format::GBR82PLANE444UNORM:return false;
        case Format::G10x6B10x6R10x62PLANE444UNORM3PACK16:return false;
        case Format::G12x4B12x4R12x42PLANE444UNORM3PACK16:return false;
        case Format::GBR162PLANE444UNORM:return false;
        case Format::ARGB4UNORMPACK16:return false;
        case Format::ABGR4UNORMPACK16:return false;
        case Format::ASTC4x4SFLOATBLOCK:return false;
        case Format::ASTC5x4SFLOATBLOCK:return false;
        case Format::ASTC5x5SFLOATBLOCK:return false;
        case Format::ASTC6x5SFLOATBLOCK:return false;
        case Format::ASTC6x6SFLOATBLOCK:return false;
        case Format::ASTC8x5SFLOATBLOCK:return false;
        case Format::ASTC8x6SFLOATBLOCK:return false;
        case Format::ASTC8x8SFLOATBLOCK:return false;
        case Format::ASTC10x5SFLOATBLOCK:return false;
        case Format::ASTC10x6SFLOATBLOCK:return false;
        case Format::ASTC10x8SFLOATBLOCK:return false;
        case Format::ASTC10x10SFLOATBLOCK:return false;
        case Format::ASTC12x10SFLOATBLOCK:return false;
        case Format::ASTC12x12SFLOATBLOCK:return false;
        case Format::PVRTC12BPPUNORMBLOCKIMG:return false;
        case Format::PVRTC14BPPUNORMBLOCKIMG:return false;
        case Format::PVRTC22BPPUNORMBLOCKIMG:return false;
        case Format::PVRTC24BPPUNORMBLOCKIMG:return false;
        case Format::PVRTC12BPPSRGBBLOCKIMG:return false;
        case Format::PVRTC14BPPSRGBBLOCKIMG:return false;
        case Format::PVRTC22BPPSRGBBLOCKIMG:return false;
        case Format::PVRTC24BPPSRGBBLOCKIMG:return false;
        case Format::RG16S105:return false;
        case Format::A1BGR5UNORMPACK16:return false;
        case Format::A8UNORM:return false;
        default: return false;
        }
    }

}